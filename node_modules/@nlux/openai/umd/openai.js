!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@nlux/core"),require("openai")):"function"==typeof define&&define.amd?define(["exports","@nlux/core","openai"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["@nlux/openai"]={},e.core,e.OpenAI)}(this,(function(e,t,s){"use strict";const a="stream",r=e=>{if("object"==typeof e&&null!==e){if("invalid_api_key"===e.code)return"NX-NT-002";if(e.message?.toLowerCase().includes("connection error"))return"NX-NT-001"}return null},o=e=>{switch(e){case"system":return"system";case"user":default:return"user";case"ai":return"assistant"}},i=e=>e.map((e=>({role:o(e.role),content:e.message}))),n=Object.freeze({id:"nlux-openai-adapter",capabilities:{chat:!0,fileUpload:!1,speechToText:!1,textToSpeech:!1}});class l{constructor({systemMessage:e,apiKey:r,dataTransferMode:o,model:i}){this.systemMessage="Act as a helpful assistant to the user",this.__instanceId=`${this.info.id}-${t.uid()}`,this.theDataTransferMode=o??a,this.model=i??"gpt-3.5-turbo",this.openai=new s({apiKey:r,dangerouslyAllowBrowser:!0}),e&&(this.systemMessage=e),t.warn('OpenAI GPT adapter has been initialized in browser mode using option "dangerouslyAllowBrowser". To learn more about OpenAI\' recommendation for handling API keys, please visit:\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\nThe useUnsafeChatAdapter/createUnsafeChatAdapter are only intended for development and testing purposes.\n\nFor production use, we recommend that you implement a server-side proxy and configure a customized adapter for it. To learn more about how to create custom adapters for nlux, visit:\nhttps://nlux.dev/learn/adapters/custom-adapters')}get dataTransferMode(){return this.theDataTransferMode}get id(){return this.__instanceId}get info(){return n}}class d extends l{constructor({apiKey:e,model:t,systemMessage:s}){super({apiKey:e,model:t,systemMessage:s,dataTransferMode:"fetch"}),void 0!==s&&s.length>0&&(this.systemMessage=s)}async fetchText(e,s){const a=this.systemMessage?[{role:"system",content:this.systemMessage}]:[];s.conversationHistory&&a.push(...i(s.conversationHistory)),a.push({role:"user",content:e});try{const e=await this.openai.chat.completions.create({stream:!1,model:this.model,messages:a}),s=await(async e=>{if(!e.choices||!e.choices[0])throw Error("Invalid payload");const t=e.choices[0].message?.content;if(null!==t)return t})(e);return void 0===s?(t.warn("Undecodable message received from OpenAI"),""):s}catch(e){throw t.warn("Error while making API call to OpenAI"),t.warn(e),new t.NluxUsageError({source:this.constructor.name,message:e?.message||"Error while making API call to OpenAI",exceptionId:r(e)??void 0})}}streamText(e,s,a){throw new t.NluxUsageError({source:this.constructor.name,message:"Cannot stream text from the fetch adapter!"})}}const c=async e=>{if(!e.choices||!e.choices[0])throw Error("Invalid payload");const t=e.choices[0].delta.content;if("string"==typeof t)return t};class h extends l{constructor({apiKey:e,model:t,systemMessage:s}){super({apiKey:e,model:t,systemMessage:s,dataTransferMode:"stream"}),void 0!==s&&s.length>0&&(this.systemMessage=s)}fetchText(e){throw new t.NluxUsageError({source:this.constructor.name,message:"Cannot fetch text from the streaming adapter!"})}streamText(e,s,a){const o=this.systemMessage?[{role:"system",content:this.systemMessage}]:[];a.conversationHistory&&o.push(...i(a.conversationHistory)),o.push({role:"user",content:e}),this.openai.chat.completions.create({stream:!0,model:this.model,messages:o}).then((async e=>{let a=e[Symbol.asyncIterator](),r=await a.next();for(;!r.done;){const e=r.value;if("stop"===(e.choices?.length>0?e.choices[0].finish_reason:void 0))break;const o=await c(e);void 0!==o?s.next(o):(t.warn("Undecodable message"),t.warn(e)),r=await a.next()}s.complete()})).catch((e=>{t.warn(e),s.error(new t.NluxUsageError({source:this.constructor.name,message:e.message,exceptionId:r(e)??void 0}))}))}}class u{constructor(e){this.apiKey=null,this.dataTransferMode=a,this.model=null,this.systemMessage=null,this.withApiKeyCalled=!1,this.withDataTransferModeCalled=!1,this.withModelCalled=!1,this.withSystemMessageCalled=!1,e&&(this.apiKey=e.apiKey,this.dataTransferMode=e.dataTransferMode,this.model=e.model,this.systemMessage=e.systemMessage,this.withApiKeyCalled=e.withApiKeyCalled,this.withSystemMessageCalled=e.withSystemMessageCalled,this.withModelCalled=e.withModelCalled,this.withDataTransferModeCalled=e.withDataTransferModeCalled)}create(){if(!this.apiKey)throw new t.NluxUsageError({source:this.constructor.name,message:"Unable to create OpenAI adapter. API key is missing. Make sure you are calling withApiKey() before calling create()."});const e={apiKey:this.apiKey,dataTransferMode:this.dataTransferMode,model:this.model??void 0,systemMessage:this.systemMessage??void 0};return"stream"===this.dataTransferMode?new h(e):new d(e)}withApiKey(e){if(this.withApiKeyCalled)throw new t.NluxUsageError({source:this.constructor.name,message:"Unable to set API key. API key setter has already been called by this builder. Make sure you are not calling withApiKey() twice."});return this.apiKey=e,this.withApiKeyCalled=!0,this}withDataTransferMode(e){if(this.withDataTransferModeCalled)throw new t.NluxUsageError({source:this.constructor.name,message:"Unable to set data loading mode. Stream or fetch setter has already been called by this builder. Make sure you are not calling stream() or fetch() twice."});return this.dataTransferMode=e,this.withDataTransferModeCalled=!0,this}withModel(e){if(this.withModelCalled)throw new t.NluxUsageError({source:this.constructor.name,message:"Unable to set model. Model setter has already been called by this builder. Make sure you are not calling withModel() twice."});return this.model=e,this.withModelCalled=!0,this}withSystemMessage(e){if(this.withSystemMessageCalled)throw new t.NluxUsageError({source:this.constructor.name,message:"Unable to set initial system message. Initial system message setter has already been called by this builder. Make sure you are not calling withSystemMessage() twice."});return this.systemMessage=e??null,this.withSystemMessageCalled=!0,this}}Object.defineProperty(e,"debug",{enumerable:!0,get:function(){return t.debug}}),e.createUnsafeChatAdapter=()=>(t.warnOnce("You just have created an OpenAI adapter that connects to the API directly from the browser. This is not recommended for production use. We recommend that you implement a server-side proxy and configure a customized adapter for it. To learn more about how to create custom adapters for nlux, visit:\nhttps://nlux.dev/learn/adapters/custom-adapters"),new u)}));
