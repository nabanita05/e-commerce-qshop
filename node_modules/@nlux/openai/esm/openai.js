import{uid as e,warn as t,NluxUsageError as s,warnOnce as a}from"@nlux/core";export{debug}from"@nlux/core";import r from"openai";const o="stream",i=e=>{if("object"==typeof e&&null!==e){if("invalid_api_key"===e.code)return"NX-NT-002";if(e.message?.toLowerCase().includes("connection error"))return"NX-NT-001"}return null},n=e=>{switch(e){case"system":return"system";case"user":default:return"user";case"ai":return"assistant"}},l=e=>e.map((e=>({role:n(e.role),content:e.message}))),h=Object.freeze({id:"nlux-openai-adapter",capabilities:{chat:!0,fileUpload:!1,speechToText:!1,textToSpeech:!1}});class c{constructor({systemMessage:s,apiKey:a,dataTransferMode:i,model:n}){this.systemMessage="Act as a helpful assistant to the user",this.__instanceId=`${this.info.id}-${e()}`,this.theDataTransferMode=i??o,this.model=n??"gpt-3.5-turbo",this.openai=new r({apiKey:a,dangerouslyAllowBrowser:!0}),s&&(this.systemMessage=s),t('OpenAI GPT adapter has been initialized in browser mode using option "dangerouslyAllowBrowser". To learn more about OpenAI\' recommendation for handling API keys, please visit:\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\nThe useUnsafeChatAdapter/createUnsafeChatAdapter are only intended for development and testing purposes.\n\nFor production use, we recommend that you implement a server-side proxy and configure a customized adapter for it. To learn more about how to create custom adapters for nlux, visit:\nhttps://nlux.dev/learn/adapters/custom-adapters')}get dataTransferMode(){return this.theDataTransferMode}get id(){return this.__instanceId}get info(){return h}}class d extends c{constructor({apiKey:e,model:t,systemMessage:s}){super({apiKey:e,model:t,systemMessage:s,dataTransferMode:"fetch"}),void 0!==s&&s.length>0&&(this.systemMessage=s)}async fetchText(e,a){const r=this.systemMessage?[{role:"system",content:this.systemMessage}]:[];a.conversationHistory&&r.push(...l(a.conversationHistory)),r.push({role:"user",content:e});try{const e=await this.openai.chat.completions.create({stream:!1,model:this.model,messages:r}),s=await(async e=>{if(!e.choices||!e.choices[0])throw Error("Invalid payload");const t=e.choices[0].message?.content;if(null!==t)return t})(e);return void 0===s?(t("Undecodable message received from OpenAI"),""):s}catch(e){throw t("Error while making API call to OpenAI"),t(e),new s({source:this.constructor.name,message:e?.message||"Error while making API call to OpenAI",exceptionId:i(e)??void 0})}}streamText(e,t,a){throw new s({source:this.constructor.name,message:"Cannot stream text from the fetch adapter!"})}}const m=async e=>{if(!e.choices||!e.choices[0])throw Error("Invalid payload");const t=e.choices[0].delta.content;if("string"==typeof t)return t};class u extends c{constructor({apiKey:e,model:t,systemMessage:s}){super({apiKey:e,model:t,systemMessage:s,dataTransferMode:"stream"}),void 0!==s&&s.length>0&&(this.systemMessage=s)}fetchText(e){throw new s({source:this.constructor.name,message:"Cannot fetch text from the streaming adapter!"})}streamText(e,a,r){const o=this.systemMessage?[{role:"system",content:this.systemMessage}]:[];r.conversationHistory&&o.push(...l(r.conversationHistory)),o.push({role:"user",content:e}),this.openai.chat.completions.create({stream:!0,model:this.model,messages:o}).then((async e=>{let s=e[Symbol.asyncIterator](),r=await s.next();for(;!r.done;){const e=r.value;if("stop"===(e.choices?.length>0?e.choices[0].finish_reason:void 0))break;const o=await m(e);void 0!==o?a.next(o):(t("Undecodable message"),t(e)),r=await s.next()}a.complete()})).catch((e=>{t(e),a.error(new s({source:this.constructor.name,message:e.message,exceptionId:i(e)??void 0}))}))}}class y{constructor(e){this.apiKey=null,this.dataTransferMode=o,this.model=null,this.systemMessage=null,this.withApiKeyCalled=!1,this.withDataTransferModeCalled=!1,this.withModelCalled=!1,this.withSystemMessageCalled=!1,e&&(this.apiKey=e.apiKey,this.dataTransferMode=e.dataTransferMode,this.model=e.model,this.systemMessage=e.systemMessage,this.withApiKeyCalled=e.withApiKeyCalled,this.withSystemMessageCalled=e.withSystemMessageCalled,this.withModelCalled=e.withModelCalled,this.withDataTransferModeCalled=e.withDataTransferModeCalled)}create(){if(!this.apiKey)throw new s({source:this.constructor.name,message:"Unable to create OpenAI adapter. API key is missing. Make sure you are calling withApiKey() before calling create()."});const e={apiKey:this.apiKey,dataTransferMode:this.dataTransferMode,model:this.model??void 0,systemMessage:this.systemMessage??void 0};return"stream"===this.dataTransferMode?new u(e):new d(e)}withApiKey(e){if(this.withApiKeyCalled)throw new s({source:this.constructor.name,message:"Unable to set API key. API key setter has already been called by this builder. Make sure you are not calling withApiKey() twice."});return this.apiKey=e,this.withApiKeyCalled=!0,this}withDataTransferMode(e){if(this.withDataTransferModeCalled)throw new s({source:this.constructor.name,message:"Unable to set data loading mode. Stream or fetch setter has already been called by this builder. Make sure you are not calling stream() or fetch() twice."});return this.dataTransferMode=e,this.withDataTransferModeCalled=!0,this}withModel(e){if(this.withModelCalled)throw new s({source:this.constructor.name,message:"Unable to set model. Model setter has already been called by this builder. Make sure you are not calling withModel() twice."});return this.model=e,this.withModelCalled=!0,this}withSystemMessage(e){if(this.withSystemMessageCalled)throw new s({source:this.constructor.name,message:"Unable to set initial system message. Initial system message setter has already been called by this builder. Make sure you are not calling withSystemMessage() twice."});return this.systemMessage=e??null,this.withSystemMessageCalled=!0,this}}const p=()=>(a("You just have created an OpenAI adapter that connects to the API directly from the browser. This is not recommended for production use. We recommend that you implement a server-side proxy and configure a customized adapter for it. To learn more about how to create custom adapters for nlux, visit:\nhttps://nlux.dev/learn/adapters/custom-adapters"),new y);export{p as createUnsafeChatAdapter};
